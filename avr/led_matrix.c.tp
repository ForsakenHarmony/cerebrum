/*
 Copyright (C) 2012 jaseg <s@jaseg.de>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 3 as published by the Free Software Foundation.
 */

#include <avr/io.h>
#include <util/delay.h>

${modulevar("raw_buffer", "uint8_t", "7B", 7)};

//FIXME this is *definitely* not elegant.
${modulevar("buffer", "uint8_t", "28B", 28, callbacks=(0, 1))};
void ${setter("buffer")}(const comm_callback_descriptor* cb, void* argbuf_end){
	uint8_t t = 0;
	for(uint8_t i = 7; i>0; i--){
        ${modulevar("raw_buffer")}[i-1] = 0;
		for(uint8_t j = 0; j<i; j++){
			${modulevar("raw_buffer")}[i-1] |= ${modulevar("buffer")}[t]<<j;
			t++;
		}
	}
	uart_putc(0x00);
	uart_putc(0x00);
}

void ${loop_function()} (){
	static uint8_t i = 0;
	static uint8_t row = 2;	//selects the currently active "row" of the matrix. On the
							//protoboards I make, this more or less corresponds to physical traces.
	uint8_t data = ${modulevar("raw_buffer")}[i];
	DDR${member["port"]}  = 0; //FIXME This is supposed to prevent "ghosting". Is it really necessary?
    PORT${member["port"]} = 0;
% if member.get("inverted", False):
	PORT${member["port"]} = ~data | row;
% else:
	PORT${member["port"]} = data;
% endif
	DDR${member["port"]}  = data | row;
	i++;
	row <<= 1;
	if(row == 0){
		row = 2;
		i = 0;
	}
    _delay_ms(1);
}

